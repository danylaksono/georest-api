version: '3'

networks:
  georestapi:
    name: georestapi

services:
  traefik:
    image: "traefik"
    container_name: traefik
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.watch"
      - "--providers.docker.exposedbydefault=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - georestapi
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.log:/traefik.log"
    depends_on:
      - tileserv
      - featureserv
    
  tileserv:
    container_name: tileserv
    image: pramsey/pg_tileserv
    command: "--config /app/tileserv_config.toml"
    ports:
      - 7800:7800
    expose:
      - "7800"
    volumes:
      - ./config/tileserv_config.toml:/app/tileserv_config.toml:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - georestapi
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tileserv.entrypoints=web"
      - traefik.http.routers.tileserv.rule=PathPrefix("/tiles")
      - "traefik.http.services.tileserv.loadbalancer.server.port=7800"
      - "traefik.http.middlewares.tileserv.plugin.httpCache.memory.limit=4Gi"
  
  featureserv:
    container_name: featureserv
    image: pramsey/pg_featureserv
    command: "--config /app/featureserv_config.toml"
    ports:
      - 9000:9000
    expose:
      - "9000"
    volumes:
      - ./config/featureserv_config.toml:/app/featureserv_config.toml:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - georestapi
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fileserv.entrypoints=web"
      - traefik.http.routers.fileserv.rule=PathPrefix("/features")
      - "traefik.http.services.fileserv.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.fileserv.plugin.httpCache.memory.limit=4Gi"

  postgrest:
    image: postgrest/postgrest
    container_name: postgrest
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - georestapi
    environment:
      PGRST_DB_URI: "postgresql://postgres:postgres@host.docker.internal:5433/gis"
      PGRST_OPENAPI_SERVER_PROXY_URI: 'http://127.0.0.1:3000'
      PGRST_DB_SCHEMAS: "public"
      PGRST_DB_ANON_ROLE: "web_anon"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgrest.entrypoints=web"
      - traefik.http.routers.postgrest.rule=PathPrefix("/api")
      - "traefik.http.services.postgrest.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.postgrest.plugin.httpCache.memory.limit=4Gi"
      - "traefik.http.routers.postgrest.middlewares=postgrest-strip"
      - "traefik.http.middlewares.postgrest-strip.stripprefix.prefixes=/api"




  # WORK ON PROGRESS: Fastgeospatial
  # Currently replaced by Postgrest, which I considered too bulky
  # This API won't be needed once OGC CQL standards are implemented
  # -----------------------------------------------------------------------
  # fastgeospatial:
  #   container_name: fastgeospatial
  #   build: https://github.com/mkeller3/fastgeospatial.git#main
  #   image: fastgeospatial
  #   command: sh -c 'cp /tmp/config.py ./config.py'
  #   volumes:
  #     - ./fastgeospatial/config.py:/tmp/config.py
  #   ports:
  #     - 8082:8080
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - georestapi


# Other packages which might be needed:
  # martin
  # postgis
  # pygeometa 
  # geohealthcheck

